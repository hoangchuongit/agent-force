# services/openai_client.py
import os
import time
from dotenv import load_dotenv
from openai import OpenAI, OpenAIError


class OpenAIClient:
    """
    Wrapper cho SDK openai>=1.0.0
    - ƒê·ªçc OPENAI_API_KEY, OPENAI_MODEL, TEMPERATURE t·ª´ .env ho·∫∑c bi·∫øn m√¥i tr∆∞·ªùng
    - V·∫´n cho ph√©p override model/temperature khi kh·ªüi t·∫°o th·ªß c√¥ng
    """

    def __init__(self, model: str | None = None, temperature: float | None = None):
        load_dotenv()  # n·∫°p file .env (n·∫øu c√≥)

        # ∆Øu ti√™n tham s·ªë truy·ªÅn v√†o; n·∫øu None th√¨ l·∫•y t·ª´ env; cu·ªëi c√πng m·ªõi d√πng m·∫∑c ƒë·ªãnh
        self.model: str = (
            model
            or os.getenv("OPENAI_MODEL")
            or "gpt-4.1-nano"
        )
        self.temperature: float = (
            float(temperature)
            if temperature is not None
            else float(os.getenv("TEMPERATURE", "0.7"))
        )

        # SDK m·ªõi: ch·ªâ c·∫ßn t·∫°o instance, t·ª± ƒë·ªçc OPENAI_API_KEY
        self.client = OpenAI()

    # --------------------- Chat Completion --------------------- #
    def chat(self, prompt: str) -> str:
        """
        G·ª≠i 1 prompt v√† l·∫•y ƒë√°p √°n d·∫°ng text.
        Tr·∫£ v·ªÅ chu·ªói ƒë√£ strip().
        """
        try:
            print(f"üîç [Prompt g·ª≠i GPT]: {prompt[:120]}‚Ä¶")
            resp = self.client.chat.completions.create(
                model=self.model,
                messages=[{"role": "user", "content": prompt}],
                temperature=self.temperature,
            )
            content = resp.choices[0].message.content
            time.sleep(1.5)  # M√¥ ph·ªèng ƒë·ªô tr·ªÖ hi·ªÉn th·ªã
            return content.strip()

        except OpenAIError as e:
            print(f"‚ö†Ô∏è L·ªói GPT: {e}")
            return "T√¥i g·∫∑p ch√∫t s·ª± c·ªë khi ph·∫£n h·ªìi."
