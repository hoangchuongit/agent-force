from fastapi import FastAPI, WebSocket
from fastapi.middleware.cors import CORSMiddleware

from orchestrator.deliberation import DeliberationOrchestrator
from services.llm_client import OpenAIClient

app = FastAPI()

# âœ… CORS cho phÃ©p truy cáº­p toÃ n bá»™ (há»¯u dá»¥ng trong demo hackathon)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    try:
        while True:
            user_input = await websocket.receive_text()

            # âœ… Má»—i láº§n táº¡o má»›i orchestrator vÃ  agent (trÃ¡nh rÃ² má»¥c tiÃªu cÅ©)
            llm_client = OpenAIClient()
            orchestrator = DeliberationOrchestrator(llm_client)

            # âœ… Gá»­i log má»¥c tiÃªu cá»§a tá»«ng agent cho client (giÃ¡m kháº£o tháº¥y rÃµ)
            for agent in orchestrator.agents:
                await websocket.send_text(f"ðŸŽ¯ [{agent.name}]: {agent.goals[-1] if agent.goals else 'KhÃ´ng cÃ³ má»¥c tiÃªu'}")

            # âœ… Báº¯t Ä‘áº§u cháº¡y orchestrator vÃ  stream káº¿t quáº£
            async for event in orchestrator.run(user_input):
                if isinstance(event, dict):
                    prefix = f"ðŸ§  [{event['agent']}]"
                    await websocket.send_text(f"{prefix}: {event['text']}")
            await websocket.send_text("[[DONE]]")

    except Exception as e:
        await websocket.send_text(f"[Lá»–I WebSocket]: {e}")
        await websocket.close()
